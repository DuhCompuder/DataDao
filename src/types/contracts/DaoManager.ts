/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DaoManagerInterface extends utils.Interface {
  functions: {
    "addCID(bytes,uint256)": FunctionFragment;
    "allInstitutions(uint256)": FunctionFragment;
    "call_actor_id(uint64,uint256,uint64,uint64,bytes,uint64)": FunctionFragment;
    "cidInfo(bytes)": FunctionFragment;
    "cidProviders(bytes,uint64)": FunctionFragment;
    "claim_bounty(uint64)": FunctionFragment;
    "createNewInstitutionDAO(string,address[])": FunctionFragment;
    "createdInstitutions(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCID"
      | "allInstitutions"
      | "call_actor_id"
      | "cidInfo"
      | "cidProviders"
      | "claim_bounty"
      | "createNewInstitutionDAO"
      | "createdInstitutions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCID",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allInstitutions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "call_actor_id",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cidInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cidProviders",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_bounty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewInstitutionDAO",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createdInstitutions",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allInstitutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "call_actor_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cidInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cidProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_bounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewInstitutionDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdInstitutions",
    data: BytesLike
  ): Result;

  events: {
    "CreatedNewInstitution(address,uint256,string,address)": EventFragment;
    "addedNewCID(bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedNewInstitution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "addedNewCID"): EventFragment;
}

export interface CreatedNewInstitutionEventObject {
  creator: string;
  timeCreated: BigNumber;
  nameOfInstitution: string;
  addressOfInstitution: string;
}
export type CreatedNewInstitutionEvent = TypedEvent<
  [string, BigNumber, string, string],
  CreatedNewInstitutionEventObject
>;

export type CreatedNewInstitutionEventFilter =
  TypedEventFilter<CreatedNewInstitutionEvent>;

export interface addedNewCIDEventObject {
  cidraw: string;
  size: BigNumber;
}
export type addedNewCIDEvent = TypedEvent<
  [string, BigNumber],
  addedNewCIDEventObject
>;

export type addedNewCIDEventFilter = TypedEventFilter<addedNewCIDEvent>;

export interface DaoManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DaoManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCID(
      cidraw: PromiseOrValue<BytesLike>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    call_actor_id(
      method: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      codec: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cidInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string] & {
        cidSet: boolean;
        cidSizes: BigNumber;
        fromInstitution: string;
      }
    >;

    cidProviders(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim_bounty(
      deal_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewInstitutionDAO(
      name: PromiseOrValue<string>,
      initialOwners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdInstitutions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addCID(
    cidraw: PromiseOrValue<BytesLike>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allInstitutions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  call_actor_id(
    method: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    flags: PromiseOrValue<BigNumberish>,
    codec: PromiseOrValue<BigNumberish>,
    params: PromiseOrValue<BytesLike>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cidInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string] & {
      cidSet: boolean;
      cidSizes: BigNumber;
      fromInstitution: string;
    }
  >;

  cidProviders(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim_bounty(
    deal_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewInstitutionDAO(
    name: PromiseOrValue<string>,
    initialOwners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdInstitutions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addCID(
      cidraw: PromiseOrValue<BytesLike>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    call_actor_id(
      method: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      codec: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, string]>;

    cidInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string] & {
        cidSet: boolean;
        cidSizes: BigNumber;
        fromInstitution: string;
      }
    >;

    cidProviders(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim_bounty(
      deal_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewInstitutionDAO(
      name: PromiseOrValue<string>,
      initialOwners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    createdInstitutions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreatedNewInstitution(address,uint256,string,address)"(
      creator?: null,
      timeCreated?: null,
      nameOfInstitution?: null,
      addressOfInstitution?: null
    ): CreatedNewInstitutionEventFilter;
    CreatedNewInstitution(
      creator?: null,
      timeCreated?: null,
      nameOfInstitution?: null,
      addressOfInstitution?: null
    ): CreatedNewInstitutionEventFilter;

    "addedNewCID(bytes,uint256)"(
      cidraw?: null,
      size?: null
    ): addedNewCIDEventFilter;
    addedNewCID(cidraw?: null, size?: null): addedNewCIDEventFilter;
  };

  estimateGas: {
    addCID(
      cidraw: PromiseOrValue<BytesLike>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    call_actor_id(
      method: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      codec: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cidInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cidProviders(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim_bounty(
      deal_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewInstitutionDAO(
      name: PromiseOrValue<string>,
      initialOwners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdInstitutions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCID(
      cidraw: PromiseOrValue<BytesLike>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    call_actor_id(
      method: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      codec: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cidInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cidProviders(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim_bounty(
      deal_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewInstitutionDAO(
      name: PromiseOrValue<string>,
      initialOwners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdInstitutions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
