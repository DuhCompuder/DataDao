/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface InstitutionInterface extends utils.Interface {
  functions: {
    "approveDealIdentifer(uint256)": FunctionFragment;
    "approveRegistrant()": FunctionFragment;
    "approveReviewer()": FunctionFragment;
    "approvedDealIdentifers(uint256)": FunctionFragment;
    "changeRole(address)": FunctionFragment;
    "dealidentiferCount()": FunctionFragment;
    "docsForApproval(uint256)": FunctionFragment;
    "docsForApprovalCount()": FunctionFragment;
    "fund(uint64)": FunctionFragment;
    "grantAccress()": FunctionFragment;
    "name()": FunctionFragment;
    "registerNewDealIdentifer(string,bytes)": FunctionFragment;
    "roleOfAccount(address)": FunctionFragment;
    "updateName(string)": FunctionFragment;
    "voteDealIdentifer(uint256)": FunctionFragment;
    "voters(bytes,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveDealIdentifer"
      | "approveRegistrant"
      | "approveReviewer"
      | "approvedDealIdentifers"
      | "changeRole"
      | "dealidentiferCount"
      | "docsForApproval"
      | "docsForApprovalCount"
      | "fund"
      | "grantAccress"
      | "name"
      | "registerNewDealIdentifer"
      | "roleOfAccount"
      | "updateName"
      | "voteDealIdentifer"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveDealIdentifer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRegistrant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveReviewer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedDealIdentifers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealidentiferCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "docsForApproval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "docsForApprovalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerNewDealIdentifer",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteDealIdentifer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveDealIdentifer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRegistrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedDealIdentifers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealidentiferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "docsForApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "docsForApprovalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAccress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerNewDealIdentifer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteDealIdentifer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {};
}

export interface Institution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstitutionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveRegistrant(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveReviewer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvedDealIdentifers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean, BigNumber] & {
        title: string;
        cid: string;
        cidSize: BigNumber;
        timeCreated: BigNumber;
        approved: boolean;
        voteCount: BigNumber;
      }
    >;

    changeRole(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealidentiferCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    docsForApproval(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean, BigNumber] & {
        title: string;
        cid: string;
        cidSize: BigNumber;
        timeCreated: BigNumber;
        approved: boolean;
        voteCount: BigNumber;
      }
    >;

    docsForApprovalCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    fund(
      unused: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantAccress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    registerNewDealIdentifer(
      title: PromiseOrValue<string>,
      cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleOfAccount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    updateName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  approveDealIdentifer(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveRegistrant(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveReviewer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvedDealIdentifers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean, BigNumber] & {
      title: string;
      cid: string;
      cidSize: BigNumber;
      timeCreated: BigNumber;
      approved: boolean;
      voteCount: BigNumber;
    }
  >;

  changeRole(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealidentiferCount(overrides?: CallOverrides): Promise<BigNumber>;

  docsForApproval(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, boolean, BigNumber] & {
      title: string;
      cid: string;
      cidSize: BigNumber;
      timeCreated: BigNumber;
      approved: boolean;
      voteCount: BigNumber;
    }
  >;

  docsForApprovalCount(overrides?: CallOverrides): Promise<BigNumber>;

  fund(
    unused: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantAccress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  registerNewDealIdentifer(
    title: PromiseOrValue<string>,
    cid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleOfAccount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  updateName(
    newName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteDealIdentifer(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    approveDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRegistrant(overrides?: CallOverrides): Promise<void>;

    approveReviewer(overrides?: CallOverrides): Promise<void>;

    approvedDealIdentifers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean, BigNumber] & {
        title: string;
        cid: string;
        cidSize: BigNumber;
        timeCreated: BigNumber;
        approved: boolean;
        voteCount: BigNumber;
      }
    >;

    changeRole(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dealidentiferCount(overrides?: CallOverrides): Promise<BigNumber>;

    docsForApproval(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, boolean, BigNumber] & {
        title: string;
        cid: string;
        cidSize: BigNumber;
        timeCreated: BigNumber;
        approved: boolean;
        voteCount: BigNumber;
      }
    >;

    docsForApprovalCount(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      unused: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantAccress(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    registerNewDealIdentifer(
      title: PromiseOrValue<string>,
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleOfAccount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    updateName(
      newName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    approveDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveRegistrant(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveReviewer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvedDealIdentifers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeRole(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealidentiferCount(overrides?: CallOverrides): Promise<BigNumber>;

    docsForApproval(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    docsForApprovalCount(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      unused: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantAccress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    registerNewDealIdentifer(
      title: PromiseOrValue<string>,
      cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleOfAccount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveRegistrant(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveReviewer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvedDealIdentifers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeRole(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealidentiferCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    docsForApproval(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    docsForApprovalCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fund(
      unused: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantAccress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerNewDealIdentifer(
      title: PromiseOrValue<string>,
      cid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleOfAccount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteDealIdentifer(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
